- name: Install Mastodon on target
  hosts: localhost
  become: yes
 
  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - curl
          - gnupg
        state: present
        update_cache: yes

    - name: Add postgresql apt key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add nodejs apt key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add nodejs 20.x ppa for apt repo
      shell:
        curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -

    - name: Install packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - lsb-release
          - ca-certificates
          - acl # for ansible https://www.buggycoder.com/ansible-error-failed-to-set-permissions/
          - nodejs # Apt key added above
          - libvips42
          - ffmpeg
          - libpq-dev
          - libxml2-dev
          - libxslt1-dev
          - file
          - git-core
          - g++
          - libprotobuf-dev
          - protobuf-compiler
          - pkg-config
          - gcc
          - autoconf
          - bison
          - build-essential
          - libssl-dev 
          - libyaml-dev
          - libreadline6-dev
          - zlib1g-dev
          - libncurses5-dev
          - libffi-dev
          - libgdbm-dev
          - nginx
          - redis-server
          - redis-tools
          - postgresql # Apt key added above
          - postgresql-contrib
          - certbot
          - python3-certbot-nginx
          - libidn11-dev
          - libicu-dev
          - libjemalloc-dev
          - acl
          - python3-psycopg2 # for community.postgresql.postgresql_user
          - python3-boto3 # For the aws_s3 step
          - cron
        state: present
        update_cache: yes

    - name: Add mastodon user
      ansible.builtin.user:
        name: mastodon

    - name: Get rbenv
      ansible.builtin.git:
        repo: "https://github.com/rbenv/rbenv.git"
        dest: "/home/mastodon/.rbenv"
      become_user: mastodon
     
    - name: Build rbenv
      shell: "cd /home/mastodon/.rbenv && src/configure && make -C src"
      become_user: mastodon
     
    - name: Set rbenv PATH
      ansible.builtin.lineinfile:
        path: "/home/mastodon/.bashrc"
        state: present
        line: "export PATH=$HOME/.rbenv/bin:$PATH"
      become_user: mastodon
     
    - name: rbenv init
      ansible.builtin.lineinfile:
        path: "/home/mastodon/.bashrc"
        state: present
        line: "eval \"$(rbenv init -)\""
      become_user: mastodon

    - name: Get ruby-build plugin (for rbenv install command)
      ansible.builtin.git:
        repo: "https://github.com/rbenv/ruby-build.git"
        dest: "/home/mastodon/.rbenv/plugins/ruby-build"
      become_user: mastodon

    - name: Install ruby
      shell: |
        source ~/.bashrc && RUBY_CONFIGURE_OPTS=--with-jemalloc /home/mastodon/.rbenv/bin/rbenv install 3.3.5 --skip-existing
      become_user: mastodon
      args:
        executable: /bin/bash

    - name: Install bundler
      shell: |
        source ~/.bashrc && /home/mastodon/.rbenv/bin/rbenv global 3.3.5 && /home/mastodon/.rbenv/versions/3.3.5/bin/gem install bundler --no-document
      become_user: mastodon
      args:
        executable: /bin/bash

    - name: Create a new database with name "psql"
      community.postgresql.postgresql_db:
        name: psql
      become_user: postgres

    - name: Connect to database and create mastodon user
      community.postgresql.postgresql_user:
        db: psql
        name: mastodon
        role_attr_flags: CREATEDB
      become_user: postgres

    - name: GRANT ALL PRIVILEGES ON SCHEMA public
      community.postgresql.postgresql_privs:
        db: psql
        privs: ALL
        type: schema
        objs: public
        role: mastodon
      become_user: postgres

    - name: Get mastodon
      ansible.builtin.git:
        repo: "https://github.com/mastodon/mastodon.git"
        dest: "/home/mastodon/live"
        version: v4.3.8
      become_user: mastodon

    - name: Get config file from s3
      aws_s3:
        bucket: imichka-ansible
        object: env/.env.production
        dest: /home/mastodon/live/.env.production
        mode: get

    - name: Get backup file from s3
      aws_s3:
        bucket: imichka-ansible
        object: env/backup.sh
        dest: /home/mastodon/backup.sh
        mode: get
      become_user: mastodon

    - name: Make script executable
      ansible.builtin.file:
        path: /home/mastodon/backup.sh
        mode: u=rwx,g=r,o=r
      become_user: mastodon

    - name: Add backup cron
      ansible.builtin.cron:
        name: "mastodon backup"
        minute: "0"
        hour: "1"
        job: "/home/mastodon/backup.sh"
        user: mastodon
        cron_file: backupmastodon
        state: present

    - name: Install Mastodon ruby deps
      shell: |
        cd /home/mastodon/live && /home/mastodon/.rbenv/versions/3.3.5/bin/bundle config deployment 'true'
        cd /home/mastodon/live && /home/mastodon/.rbenv/versions/3.3.5/bin/bundle config without 'development test'
        cd /home/mastodon/live && /home/mastodon/.rbenv/versions/3.3.5/bin/bundle install -j$(getconf _NPROCESSORS_ONLN)
      become_user: mastodon

    - name: Install yarn deps
      shell: |
        mkdir /home/mastodon/bin
        cd /home/mastodon/live && corepack enable --install-directory /home/mastodon/bin
        cd /home/mastodon/live && corepack prepare
        cd /home/mastodon/live && /home/mastodon/bin/yarn install --immutable
      become_user: mastodon
