- name: Install Mastodon on target
  hosts: localhost
  become: yes
 
  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - gnupg
          - apt-transport-https
          - lsb-release
          - ca-certificates
          - acl # for ansible https://www.buggycoder.com/ansible-error-failed-to-set-permissions/
        state: present
 
    - name: Install node
      shell: |
        curl -sL https://deb.nodesource.com/setup_16.x | bash -

    - name: Install postgresql
      shell: |
        wget -O /usr/share/keyrings/postgresql.asc https://www.postgresql.org/media/keys/ACCC4CF8.asc
        echo "deb [signed-by=/usr/share/keyrings/postgresql.asc] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/postgresql.list

    - name: Install packages
      ansible.builtin.apt:
        name:
          - imagemagick
          - ffmpeg
          - libpq-dev
          - libxml2-dev
          - libxslt1-dev
          - file
          - git-core
          - g++
          - libprotobuf-dev
          - protobuf-compiler
          - pkg-config
          - nodejs
          - gcc
          - autoconf
          - bison
          - build-essential
          - libssl-dev 
          - libyaml-dev
          - libreadline6-dev
          - zlib1g-dev
          - libncurses5-dev
          - libffi-dev
          - libgdbm-dev
          - nginx
          - redis-server
          - redis-tools
          - postgresql
          - postgresql-contrib
          - certbot
          - python3-certbot-nginx
          - libidn11-dev
          - libicu-dev
          - libjemalloc-dev
          - acl
          - python3-psycopg2 # for community.postgresql.postgresql_user
        state: present

    - name: Yarn  
      shell: |
        corepack enable
        yarn set version classic

    - name: Add mastodon user
      ansible.builtin.user:
        name: mastodon

    - name: Get rbenv
      ansible.builtin.git:
        repo: "https://github.com/rbenv/rbenv.git"
        dest: "/home/mastodon/.rbenv"
      become_user: mastodon
     
    - name: Build rbenv
      shell: "cd /home/mastodon/.rbenv && src/configure && make -C src"
      become_user: mastodon
     
    - name: Set rbenv PATH
      ansible.builtin.lineinfile:
        path: "/home/mastodon/.bashrc"
        state: present
        line: "export PATH='$HOME/.rbenv/bin:$PATH'"
      become_user: mastodon
     
    - name: rbenv init
      ansible.builtin.lineinfile:
        path: "/home/mastodon/.bashrc"
        state: present
        line: "eval '$(rbenv init -)'"
      become_user: mastodon

    - name: Install ruby
      shell: |
        source ~/.bashrc && RUBY_CONFIGURE_OPTS=--with-jemalloc /home/mastodon/.rbenv/bin/rbenv install 3.0.6 --skip-existing
      become_user: mastodon
      args:
        executable: /bin/bash

    - name: Install bundler
      shell: |
        source ~/.bashrc && /home/mastodon/.rbenv/bin/rbenv global 3.0.6 && /home/mastodon/.rbenv/versions/3.0.6/bin/gem install bundler --no-document
      become_user: mastodon
      args:
        executable: /bin/bash

    - name: Create a new database with name "psql"
      community.postgresql.postgresql_db:
        name: psql
      become_user: postgres

    - name: Connect to database and create mastodon user
      community.postgresql.postgresql_user:
        db: psql
        name: mastodon
        role_attr_flags: CREATEDB
      become_user: postgres

    - name: GRANT ALL PRIVILEGES ON SCHEMA public
      community.postgresql.postgresql_privs:
        db: psql
        privs: ALL
        type: schema
        objs: public
        role: mastodon
      become_user: postgres

    - name: Get mastodon
      ansible.builtin.git:
        repo: "https://github.com/mastodon/mastodon.git"
        dest: "/home/mastodon/live"
        version: v4.1.2
      become_user: mastodon

    - name: Install Mastodon ruby deps
      shell: |
        cd /home/mastodon/live && /home/mastodon/.rbenv/versions/3.0.6/bin/bundle config deployment 'true'
        cd /home/mastodon/live && /home/mastodon/.rbenv/versions/3.0.6/bin/bundle config without 'development test'
        cd /home/mastodon/live && /home/mastodon/.rbenv/versions/3.0.6/bin/bundle install -j$(getconf _NPROCESSORS_ONLN)
      become_user: mastodon
      
    - name: Install more deps
      shell: cd /home/mastodon/live && yarn install --pure-lockfile

    - name: Install more deps
      shell: cp /home/mastodon/live/.env.production.sample /home/mastodon/live/.env.production
      become_user: mastodon

    - name: Install Mastodon
      shell: |
        # cd /home/mastodon/live && RAILS_ENV=production /home/mastodon/.rbenv/versions/3.0.6/bin/bundle exec rake mastodon:setup --verbose --trace

        /etc/postgresql/15/main/pg_hba.conf
        peer -> scram-sha-256

        cd /home/mastodon/live && RAILS_ENV=production /home/mastodon/.rbenv/versions/3.0.6/bin/bundle exec rake secret
        cd /home/mastodon/live && RAILS_ENV=production /home/mastodon/.rbenv/versions/3.0.6/bin/bundle exec rake db:setup
        cd /home/mastodon/live && RAILS_ENV=production /home/mastodon/.rbenv/versions/3.0.6/bin/bundle exec rake assets:precompile --verbose --trace
      become_user: mastodon  

    - name: Install nginx conf
      shell: cp /home/mastodon/live/dist/nginx.conf /etc/nginx/sites-available/mastodon
      become_user: mastodon